generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String                @id @default(cuid())
  email        String                @unique
  password     String
  name         String
  role         UserRole              @default(INVESTIDOR)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  reports      EnvironmentalReport[]
  properties   Property[]
  tokenHolders TokenHolder[]
  transactions Transaction[]

  @@map("users")
}

model Property {
  id                  String         @id @default(cuid())
  name                String
  description         String?
  address             String
  latitude            Float
  longitude           Float
  area                Float
  matriculaImovel     String?
  car                 String?
  georreferenciamento String?
  status              PropertyStatus @default(PENDING)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  ownerId             String
  greenAreas          GreenArea[]
  owner               User           @relation(fields: [ownerId], references: [id])
  tokens              Token[]

  @@map("properties")
}

model GreenArea {
  id          String                @id @default(cuid())
  name        String
  description String?
  area        Float
  coordinates Json
  status      GreenAreaStatus       @default(ACTIVE)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  propertyId  String
  reports     EnvironmentalReport[]
  property    Property              @relation(fields: [propertyId], references: [id])
  tokens      Token[]

  @@map("green_areas")
}

model Token {
  id           String        @id @default(cuid())
  name         String
  symbol       String
  totalSupply  Int
  price        Float
  status       TokenStatus   @default(ACTIVE)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  greenAreaId  String
  propertyId   String
  holders      TokenHolder[]
  greenArea    GreenArea     @relation(fields: [greenAreaId], references: [id])
  property     Property      @relation(fields: [propertyId], references: [id])
  transactions Transaction[]

  @@map("tokens")
}

model TokenHolder {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  tokenId   String
  token     Token    @relation(fields: [tokenId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, tokenId])
  @@map("token_holders")
}

model Transaction {
  id        String            @id @default(cuid())
  type      TransactionType
  amount    Float
  quantity  Int
  status    TransactionStatus @default(PENDING)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  userId    String
  tokenId   String
  token     Token             @relation(fields: [tokenId], references: [id])
  user      User              @relation(fields: [userId], references: [id])

  @@map("transactions")
}

model EnvironmentalReport {
  id          String    @id @default(cuid())
  title       String
  description String
  data        Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  greenAreaId String
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  greenArea   GreenArea @relation(fields: [greenAreaId], references: [id])

  @@map("environmental_reports")
}

enum UserRole {
  ADMIN
  INVESTIDOR
  PROPERTY_OWNER
}

enum PropertyStatus {
  PENDING
  APPROVED
  REJECTED
  ACTIVE
  INACTIVE
}

enum GreenAreaStatus {
  ACTIVE
  INACTIVE
  UNDER_AUDIT
}

enum TokenStatus {
  ACTIVE
  INACTIVE
  PAUSED
}

enum TransactionType {
  BUY
  SELL
  TRANSFER
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
